	// Determines the resolution of the scene rendered
	// If auto is true, the width/height will be ignored,
	// and the scene will instead render at 1:1 with the canvas
	// use it if you want it to look crisp on any screen
	// otherwise, I recommend something in the range of 64-512
	size: {
		auto: true,
		width: 128,
		height: 128,
	},
	// If true, inputs are rotated to match the current camera direction
	// if you're using a camera that can be freely rotated,
	// this will generally be preferable,
	// but you may want to disable it for some setups
	// (e.g. a fixed third person camera)
	cameraRelativeMovement: true,
	// If true, left/right inputs are overridden to control 90-degree camera rotations
	// this requires `cameraRelativeMovement: true` to be usable,
	// and it's recommended to not add camera controls if used
	tankControls: false,
	// scene setup
	// a number of helper functions are provided to make this easier
	// but the only necessary thing is to create a camera and assign it to the scene
	init: function (scene) {
		scene.activeCamera = makeBaseCamera(); // creates a camera with some basic presets
		// makeOrthographic(camera, bitsy.mapsize); // makes the camera use orthographic projection (camera, size)
		makeFollowPlayer(scene.activeCamera); // locks the camera to the player
		addControls(scene.activeCamera); // adds rotate/zoom controls (also pan if not following player)
		// addFog(0.5, 1.0); // adds fog in the range (start, end)
		// addShader(`shader source`, 1.0); // adds a post-processing shader (shader source, downscale factor)
	},
	// If true, dialog renders at the top
	// otherwise, renders at the bottom
	// (bitsy's typical position-based rendering doesn't make sense in 3D)
	topDialog: true,
	// Function used in transparent sprites hack
	isTransparent: function (drawing) {
		var name = drawing.name || '';
		var match = name.match(/#transparent\(((true)|(false))\)/);
		if (match) {
			// 2nd capturing group will be undefined if the input said 'false'
			return Boolean(match[2]);
		}
		return !drawing.drw.includes('TIL');
	},
	// Function used to determine how a bitsy drawing is translated into a 3D object
	// available types are:
	// 	- 'plane': plane standing up straight
	// 	- 'billboard': like plane, but turns to look at the camera
	// 	- 'box': standard cube
	// 	- 'floor': plane flat on the ground
	// 	- 'tower1', 'tower2', etc: box variations that are taller and tiled
	// 	- 'wedge': base mesh for wedges, facing left with its slanted side
	// 	- 'empty': base mesh for wedges, facing left with its slanted side
	getType: function (drawing) {
		var drw = drawing.drw;
		var name = drawing.name || '';

		// match the drawing's name against the regular expression
		// that describes #mesh(type) tag
		var meshMatch = name.match(/#mesh\((.+?)\)/);
		if (meshMatch) {
			if (meshTemplates[meshMatch[1]]) {
				return meshMatch[1];
			} else {
				// if the specified mesh template doesn't exist,
				// display error message, but continue execution
				// to resolve the mesh with default logic
				console.error(`mesh template '${meshMatch[1]}' wasn't found`);
			}
		}

		// default
		if (drawing.id === bitsy.playerId) {
			return 'plane';
		}
		if (drw.startsWith('ITM')) {
			return 'plane';
		}
		if (drw.startsWith('SPR')) {
			return 'billboard';
		}
		if (drawing.isWall) {
			return 'box';
		}
		return 'floor';
	},
	// controls how the 'billboard' type behaves
	// recommendation: the default provided below, or BABYLON.TransformNode.BILLBOARDMODE_ALL
	getBillboardMode: function (BABYLON) {
		return BABYLON.TransformNode.BILLBOARDMODE_Y | BABYLON.TransformNode.BILLBOARDMODE_Z;
	},
	// If true, textures will be preloaded before they're needed while idle
	// it's recommended to keep this on for more consistent performance post-startup
	// (without it, you may notice stutter the first time you enter a room)
	// but if you have a big, highly branching game with lots of art,
	// you may want to disable it
	preloadTextures: true,

	// function used to adjust mesh instances after they have been added to the scene
	meshExtraSetup: function (drawing, mesh) {
		var name = drawing.name || '';

		// transform tags. #t(x,y,z): translate (move), #r(x,y,z): rotate, #s(x,y,z): scale
		// #m(1,0,0.5) and #m(1,,.5) are both examples of valid input
		// scale
		var scaleTag = name.match(/#s\((-?\.?\d*\.?\d*)?,(-?\.?\d*\.?\d*)?,(-?\.?\d*\.?\d*)?\)/);
		if (scaleTag) {
			mesh.scaling = new BABYLON$1.Vector3(
				Number(scaleTag[1]) || 0,
				Number(scaleTag[2]) || 0,
				Number(scaleTag[3]) || 0
			);
		}
		// rotate. input in degrees
		var rotateTag = name.match(/#r\((-?\.?\d*\.?\d*)?,(-?\.?\d*\.?\d*)?,(-?\.?\d*\.?\d*)?\)/);
		if (rotateTag) {
			mesh.rotation.x += radians(Number(rotateTag[1]) || 0);
			mesh.rotation.y += radians(Number(rotateTag[2]) || 0);
			mesh.rotation.z += radians(Number(rotateTag[3]) || 0);
		}
		// translate (move)
		var translateTag = name.match(/#t\((-?\.?\d*\.?\d*)?,(-?\.?\d*\.?\d*)?,(-?\.?\d*\.?\d*)?\)/);
		if (translateTag) {
			mesh.position.x += (Number(translateTag[1]) || 0);
			mesh.position.y += (Number(translateTag[2]) || 0);
			mesh.position.z += (Number(translateTag[3]) || 0);
		}
	},
	// smooth moves hack options
	// duration of ease in ms
	duration: 100,
	// max distance to allow tweens
	delta: 1.5,
	// easing function
	ease: function(t) {
		t = 1 - Math.pow(1 - t, 2);
		return t;
	},