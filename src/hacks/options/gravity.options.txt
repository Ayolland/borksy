// Configure whether or not gravity should be active when the game starts.
// Use the `toggleGravity` dialog tag to turn it on/off
activeOnLoad: true,

// Configure how much JumpPower the player has after landing
// Set this to 1 and player can jump 1 tile high any time they are on the ground
// Set this to 0 for no jumping/only falling
// Player can only jump straight up from a solid object, they cannot jump while
// falling or after moving horizontally unless `jetpack` is active
jumpPower: 0,

// If true, then the player can jump while falling/in mid-air
// Player is still restricted by the amount of JumpPower they have left,
// which does not replenish until they land on a solid object
jetpack: false,

// Configure which tiles are "climbable".
// Player will be able to move upward while standing on those tiles.
// Useful for making ladders, ropes, trampolines, etc.
isClimbable: function (tile) {
	return tile.name && tile.name.indexOf('CLIMB') !== -1; // climbable tile flag in name
	// return tile.name == 'ladder'; // specific climbable tile
	// return ['ladder', 'rope', 'trampoline'].indexOf(tile.name) !== -1; // specific climbable tile list
},

// Configure which tiles are "standable".
// Player will be able to walk horizontally across this tile even if it's not a wall/sprite.
// Useful for making a ladder/rope that connect to a standable surface at it's top.
isStandable: function (tile) {
	return tile.name && tile.name.indexOf('STAND') !== -1; // standable tile flag in name
	// return tile.name == 'ledge'; // specific standable tile
	// return ['ledge', 'overhang', 'trapdoor'].indexOf(tile.name) !== -1; // specific standable tile list
},

// Sets the direction that gravity initially flows in
// Can be changed with the `setGravityDirection` dialog tag
initialGravityDir: 'down',

// If true, player avatar will be rotated whenever `setGravityDirection` is used
// TODO: how does this interact with initialGravityDir?
flipAvatarOnGravityChange: true,

// Runs any time the player "lands" on something solid,
// `tilesFallen` is the number of tiles they fell.
// Grabbing a ladder or using the "jetpack" will reset the fall counter.
// If you don't want any fall damage, leave this function empty
// Contains examples for decreasing a variable or ending the game
landed: function (tilesFallen) {
	console.log('landed', tilesFallen);
	// // Decrease a variable in your game called `health`
	// var health = bitsy.scriptInterpreter.GetVariable('health');
	// bitsy.scriptInterpreter.SetVariable('health', health - tilesFallen);

	// // or maybe just end the game if the fall was high enough?
	// if (tilesFallen > 5) {
	// bitsy.dialogBuffer.EndDialog();
	// bitsy.startNarrating('YOU DIED!', true);
	// }
},

// Controls how much the player can move horizontally during a single "fall"
// For each move in a fall, this ratio must be less than (<) the max:
// (number of tiles moved horizontally) / (total number of tiles moved)
// Set this to 0 to be unable to move horizontally while falling
// Set this to 0.5 and player can move horizontally every other move while falling
// Set this to 1 to always be able to move horizontally while falling
maxHorizontalFallingRatio: 0.51,